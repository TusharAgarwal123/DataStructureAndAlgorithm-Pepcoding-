package com.ds.level2.Graph;

import java.util.Arrays;

//leetcode 924. Minimize Malware Spread

/*
 * You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is
 *  directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least
 one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware
  will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of
 malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize
 M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due
 to the malware spread.
 */

public class MinimizeMalwareSpread {

	int parent[];
	int size[];

	public int minMalwareSpread(int[][] graph, int[] initial) {

		parent = new int[graph.length];
		size = new int[graph.length];

		for (int i = 0; i < graph.length; i++) {
			parent[i] = i;
			size[i] = 1;
		}

		for (int i = 0; i < graph.length; i++) {
			for (int j = 0; j < graph.length; j++) {
				if (i != j && graph[i][j] == 1) {
					unionHelper(i, j);
				}
			}
		}

		// it will store the no of infected vertex in each components.
		int infectSize[] = new int[graph.length];

		for (int i : initial) {
			int pi = find(i);
			infectSize[pi]++;
		}

		int ansInitial = -1;
		int ansSize = 0;
		for (int i : initial) {
			int pi = find(i);
			if (infectSize[pi] == 1) {
				if (ansInitial == -1) {
					ansInitial = i;
					ansSize = size[pi];
				} else if (size[pi] > ansSize) {
					ansSize = size[pi];
					ansInitial = i;
				} else if (ansSize == size[pi]) {
					if (i < ansInitial) {
						ansInitial = i;
					}
				}
			}
		}

		if (ansInitial == -1) {

			Arrays.sort(initial);
			return initial[0];
		}

		return ansInitial;

	}

	public void unionHelper(int x, int y) {
		if (find(x) != find(y)) {
			union(find(x), find(y));
		}
	}

	public void union(int x, int y) {

		if (size[x] < size[y]) {
			parent[x] = y;
			size[y] += size[x];
		} else {
			parent[y] = x;
			size[x] += size[y];
		}

	}

	public int find(int x) {
		if (parent[x] == x) {
			return x;
		} else {
			parent[x] = find(parent[x]);
			return parent[x];
		}
	}

}
